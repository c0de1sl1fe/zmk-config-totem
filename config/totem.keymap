//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define BASE 0
#define MATH 1
#define SYMB 2
#define ADJU  3

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
    };

    behaviors {
        ss_hs_modmorph: ss_hs_modmorph {
            compatible = "zmk,behavior-mod-morph";
            label = "SS_HS_MODMORPH";
            bindings = <&kp M>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        kh_hs_tapdance: kh_hs_tapdance {
            compatible = "zmk,behavior-tap-dance";
            label = "KH_HS_TAPDANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LEFT_BRACKET>, <&kp RIGHT_BRACKET>;
        };

        hrm: hrm {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <155>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "BASE";
            bindings = <
           &kp Q        &kp W        &kp E         &kp R         &kp T          &kp Y            &kp U         &kp I            &kp O        &kp P
           &hrm LGUI A  &hrm LALT S  &hrm LSHFT D  &hrm LCTRL F  &kp G          &kp H            &hrm LCTRL J  &hrm RSHIFT K    &hrm LALT L  &hrm RGUI SEMICOLON
&kp GRAVE  &kp Z        &kp X        &kp C         &kp V         &kp B          &kp N            &kp M         &kp COMMA        &kp DOT      &kp FSLH             &kp SQT
                                     &lt 1 ESCAPE  &lt 2 TAB     &lt 0 ENTER    &lt 5 BACKSPACE  &lt 3 SPACE   &lt 1 BACKSLASH
            >;
        };

        numbers {
            bindings = <
         &kp F1    &kp F2       &kp F3    &kp F4      &kp F5         &kp F6     &kp F7         &kp F8        &kp F9                &kp F10
         &kp N1    &kp N2       &kp N3    &kp N4      &kp N5         &kp N6     &kp N7         &kp N8        &kp N9                &kp N0
&kp F12  &kp EXCL  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp F11
                                &kp ESC   &kp TAB     &kp RET        &kp DEL    &kp SPACE      &mo 6
            >;
        };

        arrow {
            bindings = <
        &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans     &trans      &kp HOME   &kp UP_ARROW  &kp END    &kp PG_UP
        &kp LGUI          &kp LALT           &kp LSHFT             &kp LCTRL              &trans     &trans      &kp LEFT   &kp DOWN      &kp RIGHT  &kp PAGE_DOWN
&trans  &trans            &trans             &kp DELETE            &kp BSPC               &trans     &kp MINUS   &kp EQUAL  &kp INSERT    &trans     &trans         &trans
                                             &kp ESC               &kp TAB                &kp RET    &kp DELETE  &kp SPACE  &trans
            >;
        };

        func {
            label = "ADJU";
            bindings = <
        &kp F10  &kp F1  &kp F2   &kp F3   &none      &bt BT_CLR  &bt BT_NXT  &bt BT_PRV       &out OUT_TOG  &trans
        &kp F11  &kp F4  &kp F5   &kp F6   &none      &trans      &kp RCTRL   &kp RIGHT_SHIFT  &kp RALT      &kp RGUI
&trans  &kp F12  &kp F7  &kp F8   &kp F9   &kp INS    &trans      &trans      &trans           &trans        &trans    &trans
                         &kp ESC  &kp TAB  &kp RET    &kp DEL     &kp SPACE   &trans
            >;
        };

        symb {
            label = "SYMB";
            bindings = <
           &kp LEFT_BRACKET       &kp AMPERSAND    &kp ASTRK    &kp LPAR   &kp RIGHT_BRACKET    &trans   &trans     &trans     &trans    &trans
           &kp RIGHT_PARENTHESIS  &kp DOLLAR       &kp PERCENT  &kp CARET  &kp BACKSLASH        &trans   &kp RSHFT  &kp RCTRL  &kp RALT  &kp RGUI
&kp GRAVE  &kp LEFT_BRACE         &kp EXCLAMATION  &kp AT_SIGN  &kp HASH   &kp RIGHT_BRACE      &trans   &trans     &trans     &trans    &trans    &trans
                                                   &kp ESC      &kp TAB    &kp RET              &kp DEL  &kp SPACE  &trans
            >;
        };

        math {
            label = "MATH";
            bindings = <
           &kp DOT    &kp N7        &kp N8        &kp N9        &kp ASTERISK    &trans     &trans           &trans     &trans         &trans
           &kp N0     &kp NUMBER_4  &kp N5        &kp N6        &kp MINUS       &trans     &kp RIGHT_SHIFT  &kp RCTRL  &kp RIGHT_ALT  &kp RIGHT_GUI
&kp EQUAL  &kp SLASH  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PLUS        &kp MINUS  &kp EQUAL        &trans     &trans         &trans         &trans
                                    &kp ESC       &kp TAB       &kp ENTER       &kp DEL    &kp SPACE        &trans
            >;
        };

        ble {
            bindings = <
        &trans  &trans        &trans        &trans        &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &bt BT_PRV    &bt BT_NXT    &bt BT_CLR    &trans    &trans  &trans  &trans  &trans  &trans  &trans
                              &trans        &trans        &trans    &trans  &trans  &trans
            >;
        };
    };
};
